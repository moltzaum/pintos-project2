#!/bin/bash
# PINTOS-P1: THREADS -- ITEMIZED TESTING SCRIPT by Brian Sumner 2018
# Updated Accordingly by Matthew and Michael


main () {
    if [ -z "$PINTOS_ROOT" ]; then
      echo
      echo '$PINTOS_ROOT is not set. Set the variable before running this script.'
      echo
      exit 1
    fi
    
    if [ -z "$PINTOS_SUB_DIR" ]; then
      echo
      echo '$PINTOS_SUB_DIR is not set. Set the variable before running this script.'
      echo
      exit 1
    fi

    # TODO: Include tests for all pintos projects, then try to make it more configurable
    # with command line options. Having a configuration file that isn't tracked would
    # be preferable.
    # 
    # The user should be able to trigger P1, P2, and P3 all as a whole or by specifying
    # individual flags such as -mlfqs, and running tests by their name. I think I will
    # need to support multiple PINTOS_SUB_DIRS, but I'm not sure. Right now I don't like
    # the idea of running the P1 tests by having to set an environment variable for the
    # subdir. I want the functionaility it provides though.
    #
    # Here is a rough idea of what I want:
    #
    # Run entire P1 suite with default build subdirectory 'threads' for P1, 'userprog' for P2, etc.
    # > pintos-tests -P1
    #
    # Run P1, P2, and P3 suites each with their own subdirectory (requires 3 builds).
    # > pintos-tests -P1 -P2 -P3
    #
    # Run the alarm single test. Auto-detect 'threads' build directory.
    # > pintos-tests --run alarm-single
    #
    # Run the tests in order. Auto-detect each test's default build directory.
    # > pintos-tests --run alarm-single alarm-multiple
    #
    # Run the tests with the userprog build directory. '--' must either have an option
    # immediately after it, or else it separates the configuration from the tests. I'm
    # undecided whether I catch redundant tests.
    # > pintos-tests --env userprog -- -P1 --run alarm-single
    #
    # Run the specified tests from a file
    # > pintos-tests -e threads -- -f my_tests.sh
    #
    # Note the following might be legal:
    # > pintos-tests -f p1.sh p2.sh
    #
    # Or:
    # > pintos-tests -e threads -- -f p2.sh
    #
    # Right now I have .sh to emphasize the content of the files, however they can be
    # expressed differently.
    #
    # OPTIONS SUMMARY:
    # -e, --environment
    # -r, --run
    # -P, --project
    # -f, --file 
    #   Single letter options may have values immediately after, whereas word options
    #   should have a space after them. The --file option could help me define P1, P2,
    #   and P3 and help me write reusable code.
    #
    # So far I don't have options for things like mlfqs or verbosity, but I think this
    # is a good start.
    # 
    echo -e "PINTOS-P1: THREADS -- ITEMIZED PASS/FAIL TESTING SCRIPT\n"
    echo -e "This script will build pintos and if successful, will execute the"
    echo -e "tests that are uncommented in this script.\n"
    
    if [[ "$1" == debug ]]; then 
      echo -e "You are using DEBUG mode. When a test boots up, it will wait for"
      echo -e "you to begin debugging from your other enviroment. When you"
      echo -e "continue in your program, the program will output here.\n"
    fi

    echo -e "Press the [ENTER] key to continue, or [CTRL]+[C] to abort testing."
    read -p ""
   
    cd $PINTOS_ROOT/src/$PINTOS_SUB_DIR
    make
    BUILD_SUCCESS=!$?
    
    if (( $BUILD_SUCCESS )); then
        
        cd build
        
        # Note: I can also specify a specific color to use
        GREP_OPTIONS='--color=always'
        FILTER=TEST
        #filter by TEST or STATUS

        run_test threads alarm-single       $FILTER
        run_test threads alarm-multiple     $FILTER
        run_test threads alarm-simultaneous $FILTER
        run_test threads alarm-priority     $FILTER
        run_test threads alarm-zero         $FILTER
        run_test threads alarm-negative     $FILTER
        
        run_test threads priority-change            $FILTER
        run_test threads priority-donate-one        $FILTER
        run_test threads priority-donate-multiple   $FILTER
        run_test threads priority-donate-multiple2  $FILTER
        run_test threads priority-donate-nest       $FILTER
        run_test threads priority-donate-sema       $FILTER
        run_test threads priority-donate-lower      $FILTER
        run_test threads priority-fifo              $FILTER
        run_test threads priority-preempt           $FILTER
        run_test threads priority-sema              $FILTER
        run_test threads priority-condvar           $FILTER
        run_test threads priority-donate-chain      $FILTER
       
        MLFQS=-mlfqs 
        run_test threads mlfqs-load-1   $FILTER
        run_test threads mlfqs-load-60  $FILTER
        run_test threads mlfqs-load-avg $FILTER
        run_test threads mlfqs-recent-1 $FILTER
        run_test threads mlfqs-fair-2   $FILTER
        run_test threads mlfqs-fair-20  $FILTER
        run_test threads mlfqs-nice-2   $FILTER
        run_test threads mlfqs-nice-10  $FILTER
        run_test threads mlfqs-block    $FILTER
        
        echo "Script execution terminated successfully."
    else
        echo "Make build failed. No tests were run."
    fi
}

# Precondition: A build directory for the current scope exists and is the current pwd.
# Verbose by default. Very easy to grep the output of this subroutine with either the
# test name or PASS/FAIL to get more succinct output.
# 
# usage:   run_test <scope> <test-name> <grep-filter-type>
# example: run_test threads alarm-multiple TEST
# 
run_test() {

  if [ -z "$2" ]; then
    echo "usage:   run_test <scope> <test> [filter]"
    echo "example: run_test threads alarm-single"
    exit
  fi
 
  # PASS/FAIL status filter 
  if [ "$3" == STATUS ]; then
    run_test $1 $2 | grep $GREP_OPTIONS -E '^(PASS|FAIL)'
    return
  fi
 
  # Succient test output filter 
  if [ "$3" == TEST ]; then
    run_test $1 $2 | grep $GREP_OPTIONS $2
    echo -e "\n"
    return
  fi

  cd tests/$1
  TEST=$2

  # Runs pintos while directing stdout and stderr to expected files
  echo "Booting pintos for test: $2"
  pintos -v -k -T 60 --qemu $GDB -- -q $MLFQS run $2 < /dev/null 2> $TEST.errors | tee $TEST.output 

  # Gets the status of the test 
  PERL_MODULE=$PINTOS_ROOT/src 
  EX=$PINTOS_ROOT/src/tests/$1/$TEST.ck
  perl -I$PERL_MODULE $EX $TEST 
}

if [ "$1" == debug ]; then
  GDB=--gdb
fi
main "$@"
